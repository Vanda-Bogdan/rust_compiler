fn main() {

    /*-------------------------------------------------------------------------------------*/
    // let - объявление переменной
    // mut - идет после let, делает переменную изменяемой

    // Целые числа (один тип: i32)
    let numberOne = 32i32;
    let numberThree:i32 = 32;
    let mut numberFour : i32 = 32;

    // Символы (char)
    let charOne = '\n';
    let charTwo:char = '\n';
    let mut charThree : char = '\n';
    
    // Строки (String)
    let strOne = "Hello world!!!";  // Надо будет сделать автоматически String
    let mut strTwo : String = String::new();
    let strThree : String = String::from("Hello world!!!");
    let strFour : String = "Hello\n\t world!!!".to_string();

    // Выражения с использованием локальных переменных
    // Арифметические операции (+, -, *, /)
    // (+=, -=, *=, /=) так же поддерживаются
    let mut a = 0;
    let mut b = 0;
    let mut c = 0;
    c = a + b;
    c = a - b;
    c = a * b;
    c = a / 1;


    // Операции сравнения (>, <, >=, <=, ==, !=) и присваивания (=)
    // Операции сравнения работают для всех используемых типов (i32, char, String)
    // char и String сравниваются по содержимому, а не по ссылке
    /*-----------------------------------------------------------------------------------------------------------*/

    // Одномерный массив (array)
    let mut numbers : [i32; 3];
    let mut strings : [String; 3];
    let mut chars : [char; 3];

    // Инициализация
    numbers = [1, 2, 3];
    let mut newStrings : [String; 2] = ["Hello".to_string(), "world".to_string()];
    let mut arr = ['a', 'b', 'c'];

    // Заполнение массива значениями по умолчанию
    chars = ['q'; 3];

    // Операция доступа к элементу массива ([])
    numbers[0] = numbers[1];

    /*------------------------------------------------------------------------------------------------------------*/

    // Целочисленные литералы
    let decimalLiteral : i32 = 1_0_0_0_9_9_9i32;   // Десятичная запись (нижние подчекривания в качестве украшения)
    let octalLiteral : i32 = 0o_1_2_3_4_5_6_7i32;  // Восьмеричная запись (нижние подчекривания в качестве украшения)
    let binaryLiteral : i32 = 0b_111_000i32;   // Двоичная запись (нижние подчекривания в качестве украшения)
    let hexLiteral : i32 = 0x0____9____a____Fi32;   // Шестнадцатиричная запись (нижние подчекривания в качестве украшения, поддерживает верхний и нижний регистр)

    // Символьные литералы
    /*
    * QUOTE_ESCAPE (\' | \")
    * ASCII_ESCAPE (\x7F | \n | \r | \t | \\ | \0)
    */
    let mut charLiteral : char = '\'';
    charLiteral = '\"';
    charLiteral = '\n';
    charLiteral = '\r';
    charLiteral = '\t';
    charLiteral = '\\';
    charLiteral = '\0';
    charLiteral = '\x0F';   // Обязательно 2 числа после \x (\x7F - верхняя граница)

    // Строковые литералы
    /*
    * QUOTE_ESCAPE
    * ASCII_ESCAPE
    * STRING_CONTINUE (\) появляется непосредственно перед разрывом строки, заетм все символы разрыва строки и табуляция игнорируются
    */
    let mut strLiteral : String = "\'\"\n\r\t\\\0\x7F\
    123".to_string();

    /*-----------------------------------------------------------------------------------------------------------------------------*/
    // Управляющие структуры (развилки)
    //Круглые скобки для условий можно опускать
    if (4 < 5) {
        println!("");
    } else if 4 > 5 {
        println!("");
    } else {

    }

    /*------------------------------------------------------------------------------------------------------------------------------*/
    // Циклы
    //Круглые скобки для условий можно опускать

    // loop замена while(true)
    loop {
        break;
    }

    // while
    while true {
        break;
    }

    // for
    let range = (1..=10).step_by(2);
    for i in range {
        //println!("{}", i);
    }

    /*------------------------------------------------------------------------------------------------------------------------------*/
    // Функции
    // return можно опускать
    fn plus_one(x: i32) -> i32 {
        x + 1  // Эквивалентно return x + 1;
    }
    
    /*-------------------------------------------------------------------------------------------------------------------------------*/
    // f64 литералы

    let mut f : f64 = 0_0_3_4___.5__;
    f = 34__.;
    f = 3_4__f64;
    f = 34.5__f64;
    f = 3__4__E+__00__00__10__f64;
    f = 0_0_3_4_.5__E__000_____34_f64;

    /*----------------------------------------------------------------------------------------------------------------------------------*/
    // Неприятные примеры

    // if с паттерном
    if let (a, b) = (3, 4) {
        println!("{}{}", a, b);
    }

}
