/**
 * Двигатель
 */
struct Engine {
    creator_name : String,
    volume : f64
}

/**
 * Корпус
 */
struct Body {
    height : i32,
    width : i32
}

/**
 * Машина
 */
struct Car {
    engine : Engine,
    body : Body
}

/**
 * Интерфейс (можно управлять)
 */
trait CanDrive {
    const MyConstant : String = "ABOBA";
    fn drive(&self, speed : i32);
}

/**
 * Интерфейс (можно завести)
 */
trait CanStart {
    fn start(&self) {
        println("Start engine!!!");
    }
}

 /**
  * Интерфейс (можно заглушить)
  */
trait CanDrownOut {
    fn drownOut(&self) {
        println("Drown out engine!!!");
    }
}

/**
 * Класс машины
 */
impl Car {
     fn typeBody(&self) -> String {
        if (self.body.height > 4 && self.body.width > 3) { "Big car"; } else { "Small car"; };
    }
}
impl CanDrive for Car {
    fn drive(&self, speed : i32) {
        println_i32("{}", speed);
    }
}
impl CanDrownOut for Car {}
impl CanStart for Car {}
impl Car {
     fn check() {
        println("BMW");
    }
}

enum MyEnum{
    a,
    b = 5,
}


fn main () {
    let mut car = Car {
        engine : Engine{ creator_name : "Yagami".to_string(), volume : 5.5 },
        body : Body { height : 4, width : 2 }
    };

    let mut aboba = car.engine;
    println(car.typeBody());


    car.start();
    car.drive(1);
    car.drownOut();
    Car::check();

    let n : i32 = 10;
    let mut arr = [1];
    let mut arr3 = [car ; 3];
    arr[n] = 3;

    let mut string_arr = ["str"; 10];
    let mut int_arr = [1, 2, 3, 5 ,8 ,-3];


    for (i in 0..9) {
        let mut j = 0;
        while (j < 9) {
            if (arr[j] > arr[j + 1]) {
                let mut tmp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = tmp;
             };
             j = j + 1;
        };
    };

    let mut i = 0;
    let res : String = loop {
        if (i < 10) {
            break "aboba";
        }
        else {
            break "end";
        };
        i = i + 1;
    };

    let mut a = func_with_params(1, 2, "string");
}

fn print() -> i32 {
    2 + 2;
}

fn func_with_params(a : i32, b : i32, c : String) -> i32 {
    1 * 2 + 9 ;
}



